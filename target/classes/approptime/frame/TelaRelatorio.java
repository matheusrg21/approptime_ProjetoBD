/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package approptime.frame;

import approptime.bo.AppropTimeBo;
import approptime.dao.filter.AtividadeFilter;
import approptime.dto.AgregadoDto;
import approptime.entity.Atividade;
import approptime.entity.Tarefa;
import approptime.entity.Usuario;
import approptime.tabela.ButtonEditarEditor;
import approptime.tabela.ButtonEditarRenderer;
import approptime.util.AutoCompleteContains;
import approptime.util.Constantes;
import approptime.util.UtilMethods;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.temporal.IsoFields;
import java.time.temporal.TemporalAdjusters;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.JTextComponent;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.validator.routines.DateValidator;

/**
 *
 * @author mrg.estagiario
 */
public class TelaRelatorio extends javax.swing.JFrame {

   /**
    * Creates new form TelaRelatorio
    */
   private final Usuario user;
   private final TelaPrincipal telaPrincipal;
   private final AppropTimeBo appropTimeBo;
   private AutoCompleteContains autoCompleteInstance = null;
   private Integer paginaAtualAtividades = 1;
   private Integer paginaAtualAgregados = 1;
   private Integer totalTablePages = 0;
   private Long totalPaginasAgregados = 0L;
   private List<Atividade> atividadesMostradas = new ArrayList<>();
   private AtividadeFilter filtroBotao = new AtividadeFilter();
   private long totalMinutos;
   private List<AgregadoDto> agregados = new ArrayList<>();
   private Long qtdTodasAtividades;

   public TelaRelatorio(AppropTimeBo appropTimeBo, Usuario user, TelaPrincipal telaPrincipal) {

      this.telaPrincipal = telaPrincipal;
      this.user = user;
      this.appropTimeBo = appropTimeBo;
      initComponents();
      loadInitialData();
      setupShortCutTextArea();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      dialogAgregados = new javax.swing.JDialog(this);
      labelDialogAgregador = new javax.swing.JLabel();
      jScrollPane2 = new javax.swing.JScrollPane();
      tabelaAgregados = new javax.swing.JTable();
      jPanel2 = new javax.swing.JPanel();
      opcaoDiario = new javax.swing.JRadioButton();
      opcaoSemanal = new javax.swing.JRadioButton();
      opcaoMensal = new javax.swing.JRadioButton();
      opcaoAnual = new javax.swing.JRadioButton();
      opcaoGlobal = new javax.swing.JRadioButton();
      labelFiltroEmUso = new javax.swing.JLabel();
      labelDtInicio = new javax.swing.JLabel();
      labelDtTermino = new javax.swing.JLabel();
      labelDsTarefa = new javax.swing.JLabel();
      labelFiltroInicio = new javax.swing.JLabel();
      labelFiltroTermino = new javax.swing.JLabel();
      labelFiltroTarefa = new javax.swing.JLabel();
      labelTempoTotal = new javax.swing.JLabel();
      labelTotalGasto = new javax.swing.JLabel();
      botaoExportarRelatorioCsv = new javax.swing.JButton();
      jPanel3 = new javax.swing.JPanel();
      botaoRelatorioPrimeiraPagina = new javax.swing.JButton();
      botaoRelatorioPaginaAnterior = new javax.swing.JButton();
      botaoRelatorioUltimaPagina = new javax.swing.JButton();
      botaoRelatorioProximaPagina = new javax.swing.JButton();
      txtNumeroPaginaAgregados = new javax.swing.JFormattedTextField();
      labelTotalPaginasAgregados = new javax.swing.JLabel();
      opcoesAgregadoras = new javax.swing.ButtonGroup();
      opcoesAgregadoras.add(opcaoAnual);
      opcoesAgregadoras.add(opcaoDiario);
      opcoesAgregadoras.add(opcaoSemanal);
      opcoesAgregadoras.add(opcaoGlobal);
      opcoesAgregadoras.add(opcaoMensal);
      panelTabela = new javax.swing.JScrollPane();
      tabelaTarefas = new javax.swing.JTable();
      jPanelFilters = new javax.swing.JPanel();
      labelInicio = new javax.swing.JLabel();
      labelTermino = new javax.swing.JLabel();
      labelTarefa = new javax.swing.JLabel();
      botaoFiltrar = new javax.swing.JButton();
      botaoLimpar = new javax.swing.JButton();
      autoCompleteInstance = new AutoCompleteContains();
      autoCompleteInstance.setIdUsuario(user.getId());
      autoCompleteInstance.setBo(appropTimeBo);
      comboBoxTarefa = autoCompleteInstance;
      fieldInicio = new javax.swing.JFormattedTextField();
      fieldTermino = new javax.swing.JFormattedTextField();
      jPanel1 = new javax.swing.JPanel();
      botaoIrParaPrimeiraPagina = new javax.swing.JButton();
      botaoIrParaPaginaAnterior = new javax.swing.JButton();
      txtNumeroPaginaAtividades = new javax.swing.JFormattedTextField();
      labelTotalPaginasAtividades = new javax.swing.JLabel();
      botaoIrParaProximaPagina = new javax.swing.JButton();
      botaoIrParaUltimaPagina = new javax.swing.JButton();
      panelButtons = new javax.swing.JPanel();
      botaoContinuar = new javax.swing.JButton();
      botaoAgregador = new javax.swing.JButton();
      botaoIrParaTelaPrincipal = new javax.swing.JButton();

      java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("approptime"); // NOI18N
      dialogAgregados.setTitle(bundle.getString("versao")); // NOI18N
      dialogAgregados.setModal(true);
      dialogAgregados.setPreferredSize(new java.awt.Dimension(769, 515));
      dialogAgregados.setResizable(false);
      dialogAgregados.setSize(new java.awt.Dimension(769, 515));
      dialogAgregados.addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowActivated(java.awt.event.WindowEvent evt) {
            dialogAgregadosWindowActivated(evt);
         }
      });

      labelDialogAgregador.setText("Selecione uma das opções agregadoras:");

      tabelaAgregados.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {

         },
         new String [] {
            "Tarefa", "Agregador", "Tempo gasto", "Período"
         }
      ) {
         boolean[] canEdit = new boolean [] {
            false, false, false, false
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      tabelaAgregados.getTableHeader().setReorderingAllowed(false);
      jScrollPane2.setViewportView(tabelaAgregados);
      if (tabelaAgregados.getColumnModel().getColumnCount() > 0) {
         tabelaAgregados.getColumnModel().getColumn(0).setMinWidth(200);
         tabelaAgregados.getColumnModel().getColumn(1).setMinWidth(100);
         tabelaAgregados.getColumnModel().getColumn(2).setMinWidth(200);
         tabelaAgregados.getColumnModel().getColumn(3).setMinWidth(100);
      }

      opcaoDiario.setText("Diário");
      opcaoDiario.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            opcaoDiarioItemStateChanged(evt);
         }
      });
      opcaoDiario.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            opcaoDiarioActionPerformed(evt);
         }
      });
      jPanel2.add(opcaoDiario);

      opcaoSemanal.setText("Semanal");
      opcaoSemanal.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            opcaoSemanalItemStateChanged(evt);
         }
      });
      opcaoSemanal.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            opcaoSemanalActionPerformed(evt);
         }
      });
      jPanel2.add(opcaoSemanal);

      opcaoMensal.setText("Mensal");
      opcaoMensal.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            opcaoMensalItemStateChanged(evt);
         }
      });
      opcaoMensal.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            opcaoMensalActionPerformed(evt);
         }
      });
      jPanel2.add(opcaoMensal);

      opcaoAnual.setText("Anual");
      opcaoAnual.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            opcaoAnualItemStateChanged(evt);
         }
      });
      opcaoAnual.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            opcaoAnualActionPerformed(evt);
         }
      });
      jPanel2.add(opcaoAnual);

      opcaoGlobal.setText("Global");
      opcaoGlobal.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            opcaoGlobalItemStateChanged(evt);
         }
      });
      opcaoGlobal.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            opcaoGlobalActionPerformed(evt);
         }
      });
      jPanel2.add(opcaoGlobal);

      labelFiltroEmUso.setText("Filtro em uso:");

      labelDtInicio.setText("Data de início:");

      labelDtTermino.setText("Data de término:");

      labelDsTarefa.setText("Tarefa:");

      labelTempoTotal.setText("Tempo total gasto:");

      botaoExportarRelatorioCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/ExportCsv-icon.png"))); // NOI18N
      botaoExportarRelatorioCsv.setText("Exportar para CSV");
      botaoExportarRelatorioCsv.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoExportarRelatorioCsvActionPerformed(evt);
         }
      });

      botaoRelatorioPrimeiraPagina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Symbol-Rewind-icon.png"))); // NOI18N
      botaoRelatorioPrimeiraPagina.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoRelatorioPrimeiraPaginaActionPerformed(evt);
         }
      });

      botaoRelatorioPaginaAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Symbol-Play-Reversed-icon.png"))); // NOI18N
      botaoRelatorioPaginaAnterior.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoRelatorioPaginaAnteriorActionPerformed(evt);
         }
      });

      botaoRelatorioUltimaPagina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Symbol-FastForward-icon.png"))); // NOI18N
      botaoRelatorioUltimaPagina.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoRelatorioUltimaPaginaActionPerformed(evt);
         }
      });

      botaoRelatorioProximaPagina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Symbol-Play-icon.png"))); // NOI18N
      botaoRelatorioProximaPagina.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoRelatorioProximaPaginaActionPerformed(evt);
         }
      });

      try {
         txtNumeroPaginaAgregados.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###")));
      } catch (java.text.ParseException ex) {
         ex.printStackTrace();
      }
      txtNumeroPaginaAgregados.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            txtNumeroPaginaAgregadosKeyPressed(evt);
         }
      });

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(163, 163, 163)
            .addComponent(botaoRelatorioPrimeiraPagina)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(botaoRelatorioPaginaAnterior)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(txtNumeroPaginaAgregados, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(labelTotalPaginasAgregados, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(botaoRelatorioProximaPagina)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(botaoRelatorioUltimaPagina)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(botaoRelatorioUltimaPagina, javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(botaoRelatorioProximaPagina, javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(botaoRelatorioPaginaAnterior, javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(botaoRelatorioPrimeiraPagina, javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(txtNumeroPaginaAgregados, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelTotalPaginasAgregados, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
      );

      javax.swing.GroupLayout dialogAgregadosLayout = new javax.swing.GroupLayout(dialogAgregados.getContentPane());
      dialogAgregados.getContentPane().setLayout(dialogAgregadosLayout);
      dialogAgregadosLayout.setHorizontalGroup(
         dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(dialogAgregadosLayout.createSequentialGroup()
            .addGroup(dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(dialogAgregadosLayout.createSequentialGroup()
                  .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(botaoExportarRelatorioCsv))
               .addGroup(dialogAgregadosLayout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(dialogAgregadosLayout.createSequentialGroup()
                        .addGroup(dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(labelDialogAgregador)
                           .addComponent(labelFiltroEmUso)
                           .addGroup(dialogAgregadosLayout.createSequentialGroup()
                              .addGap(6, 6, 6)
                              .addGroup(dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                 .addGroup(dialogAgregadosLayout.createSequentialGroup()
                                    .addComponent(labelDtInicio)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(labelFiltroInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                 .addGroup(dialogAgregadosLayout.createSequentialGroup()
                                    .addComponent(labelDtTermino)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(labelFiltroTermino, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                 .addGroup(dialogAgregadosLayout.createSequentialGroup()
                                    .addComponent(labelDsTarefa)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(labelFiltroTarefa, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 205, Short.MAX_VALUE))
                     .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)))
               .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogAgregadosLayout.createSequentialGroup()
                  .addGap(0, 0, Short.MAX_VALUE)
                  .addComponent(labelTempoTotal)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(labelTotalGasto, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
      );
      dialogAgregadosLayout.setVerticalGroup(
         dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(dialogAgregadosLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(labelDialogAgregador)
            .addGap(0, 0, 0)
            .addGroup(dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(botaoExportarRelatorioCsv))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(labelFiltroEmUso)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(labelFiltroInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(labelDtInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(labelFiltroTermino, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(labelDtTermino))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(labelDsTarefa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(labelFiltroTarefa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(dialogAgregadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(labelTempoTotal)
               .addComponent(labelTotalGasto, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
      setTitle(bundle.getString("versao")); // NOI18N
      setLocationByPlatform(true);
      setResizable(false);
      addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            formMouseClicked(evt);
         }
      });
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowActivated(java.awt.event.WindowEvent evt) {
            formWindowActivated(evt);
         }
      });

      tabelaTarefas.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {

         },
         new String [] {
            "ID", "Tarefa", "Período", "Duração", "", ""
         }
      ) {
         Class[] types = new Class [] {
            java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
         };
         boolean[] canEdit = new boolean [] {
            false, false, false, false, true, true
         };

         public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
         }

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      tabelaTarefas.setCellSelectionEnabled(true);
      tabelaTarefas.setRowHeight(20);
      tabelaTarefas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      tabelaTarefas.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            tabelaTarefasFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            tabelaTarefasFocusLost(evt);
         }
      });
      panelTabela.setViewportView(tabelaTarefas);
      tabelaTarefas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      if (tabelaTarefas.getColumnModel().getColumnCount() > 0) {
         tabelaTarefas.getColumnModel().getColumn(0).setMinWidth(40);
         tabelaTarefas.getColumnModel().getColumn(0).setPreferredWidth(30);
         tabelaTarefas.getColumnModel().getColumn(0).setMaxWidth(60);
         tabelaTarefas.getColumnModel().getColumn(1).setMinWidth(140);
         tabelaTarefas.getColumnModel().getColumn(1).setPreferredWidth(240);
         tabelaTarefas.getColumnModel().getColumn(2).setMinWidth(220);
         tabelaTarefas.getColumnModel().getColumn(2).setPreferredWidth(230);
         tabelaTarefas.getColumnModel().getColumn(2).setMaxWidth(250);
         tabelaTarefas.getColumnModel().getColumn(3).setPreferredWidth(100);
         tabelaTarefas.getColumnModel().getColumn(3).setMaxWidth(80);
         tabelaTarefas.getColumnModel().getColumn(4).setMinWidth(32);
         tabelaTarefas.getColumnModel().getColumn(4).setPreferredWidth(60);
         tabelaTarefas.getColumnModel().getColumn(4).setMaxWidth(32);
         tabelaTarefas.getColumnModel().getColumn(4).setCellEditor(new ButtonEditarEditor(tabelaTarefas, telaPrincipal, this, this.appropTimeBo));
         tabelaTarefas.getColumnModel().getColumn(4).setCellRenderer(new ButtonEditarRenderer());
         tabelaTarefas.getColumnModel().getColumn(5).setMinWidth(32);
         tabelaTarefas.getColumnModel().getColumn(5).setPreferredWidth(30);
         tabelaTarefas.getColumnModel().getColumn(5).setMaxWidth(32);
         tabelaTarefas.getColumnModel().getColumn(5).setCellEditor(new approptime.tabela.ButtonDeleteEditor(tabelaTarefas, this, this.appropTimeBo)
         );
         tabelaTarefas.getColumnModel().getColumn(5).setCellRenderer(new approptime.tabela.ButtonDeleteRenderer());
      }

      labelInicio.setText("Início em:");

      labelTermino.setText("Término até:");

      labelTarefa.setText("Tarefa:");

      botaoFiltrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Search-icon.png"))); // NOI18N
      botaoFiltrar.setText("Filtrar");
      botaoFiltrar.setToolTipText("Filtra as atividades a partir dos dados preenchidos");
      botaoFiltrar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoFiltrarActionPerformed(evt);
         }
      });

      botaoLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Backsapce-icon.png"))); // NOI18N
      botaoLimpar.setText("Limpar");
      botaoLimpar.setToolTipText("Limpa os campos de filtro");
      botaoLimpar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoLimparActionPerformed(evt);
         }
      });

      comboBoxTarefa.setEditable(true);
      comboBoxTarefa.setPopupVisible(false);

      try {
         fieldInicio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
      } catch (java.text.ParseException ex) {
         ex.printStackTrace();
      }
      fieldInicio.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
      fieldInicio.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusLost(java.awt.event.FocusEvent evt) {
            fieldInicioFocusLost(evt);
         }
      });
      fieldInicio.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mousePressed(java.awt.event.MouseEvent evt) {
            fieldInicioMousePressed(evt);
         }
      });
      fieldInicio.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyReleased(java.awt.event.KeyEvent evt) {
            fieldInicioKeyReleased(evt);
         }
      });

      try {
         fieldTermino.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
      } catch (java.text.ParseException ex) {
         ex.printStackTrace();
      }
      fieldTermino.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
      fieldTermino.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusLost(java.awt.event.FocusEvent evt) {
            fieldTerminoFocusLost(evt);
         }
      });
      fieldTermino.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mousePressed(java.awt.event.MouseEvent evt) {
            fieldTerminoMousePressed(evt);
         }
      });
      fieldTermino.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyReleased(java.awt.event.KeyEvent evt) {
            fieldTerminoKeyReleased(evt);
         }
      });

      javax.swing.GroupLayout jPanelFiltersLayout = new javax.swing.GroupLayout(jPanelFilters);
      jPanelFilters.setLayout(jPanelFiltersLayout);
      jPanelFiltersLayout.setHorizontalGroup(
         jPanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFiltersLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(labelInicio)
               .addComponent(fieldInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(31, 31, 31)
            .addGroup(jPanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(labelTermino)
               .addComponent(fieldTermino, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(37, 37, 37)
            .addGroup(jPanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanelFiltersLayout.createSequentialGroup()
                  .addComponent(labelTarefa)
                  .addGap(93, 93, 93))
               .addGroup(jPanelFiltersLayout.createSequentialGroup()
                  .addComponent(comboBoxTarefa, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                  .addComponent(botaoFiltrar)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(botaoLimpar)
                  .addContainerGap())))
      );
      jPanelFiltersLayout.setVerticalGroup(
         jPanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanelFiltersLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(labelInicio)
               .addComponent(labelTermino)
               .addComponent(labelTarefa))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(botaoFiltrar)
               .addComponent(botaoLimpar)
               .addComponent(comboBoxTarefa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(fieldInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(fieldTermino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
      );

      botaoIrParaPrimeiraPagina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Symbol-Rewind-icon.png"))); // NOI18N
      botaoIrParaPrimeiraPagina.setToolTipText("Ir para primeira página");
      botaoIrParaPrimeiraPagina.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoIrParaPrimeiraPaginaActionPerformed(evt);
         }
      });

      botaoIrParaPaginaAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Symbol-Play-Reversed-icon.png"))); // NOI18N
      botaoIrParaPaginaAnterior.setToolTipText("Ir para página anterior");
      botaoIrParaPaginaAnterior.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoIrParaPaginaAnteriorActionPerformed(evt);
         }
      });

      try {
         txtNumeroPaginaAtividades.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####")));
      } catch (java.text.ParseException ex) {
         ex.printStackTrace();
      }
      txtNumeroPaginaAtividades.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            txtNumeroPaginaAtividadesKeyPressed(evt);
         }
      });

      botaoIrParaProximaPagina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Symbol-Play-icon.png"))); // NOI18N
      botaoIrParaProximaPagina.setToolTipText("Ir para próxima página");
      botaoIrParaProximaPagina.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoIrParaProximaPaginaActionPerformed(evt);
         }
      });

      botaoIrParaUltimaPagina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Symbol-FastForward-icon.png"))); // NOI18N
      botaoIrParaUltimaPagina.setToolTipText("Ir para última página");
      botaoIrParaUltimaPagina.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoIrParaUltimaPaginaActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(170, 170, 170)
            .addComponent(botaoIrParaPrimeiraPagina)
            .addGap(5, 5, 5)
            .addComponent(botaoIrParaPaginaAnterior)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(txtNumeroPaginaAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(5, 5, 5)
            .addComponent(labelTotalPaginasAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(botaoIrParaProximaPagina)
            .addGap(5, 5, 5)
            .addComponent(botaoIrParaUltimaPagina)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(5, 5, 5)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(botaoIrParaPrimeiraPagina)
               .addComponent(botaoIrParaPaginaAnterior)
               .addComponent(botaoIrParaProximaPagina)
               .addComponent(botaoIrParaUltimaPagina)
               .addComponent(txtNumeroPaginaAtividades, javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(labelTotalPaginasAtividades, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
      );

      botaoContinuar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/continue-icon.png"))); // NOI18N
      botaoContinuar.setText("Continuar");
      botaoContinuar.setToolTipText("Continua a atividade selecionada na tabela considerando os campos \"Tarefa\" e \"Observação\"");
      botaoContinuar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoContinuarActionPerformed(evt);
         }
      });
      panelButtons.add(botaoContinuar);

      botaoAgregador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/relatorio-icon.png"))); // NOI18N
      botaoAgregador.setMnemonic(KeyEvent.VK_R);
      botaoAgregador.setText("Relatório");
      botaoAgregador.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoAgregadorActionPerformed(evt);
         }
      });
      panelButtons.add(botaoAgregador);

      botaoIrParaTelaPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/approptime/icon/Home-icon.png"))); // NOI18N
      botaoIrParaTelaPrincipal.setMnemonic(KeyEvent.VK_H);
      botaoIrParaTelaPrincipal.setText("Ir para Tela Principal");
      botaoIrParaTelaPrincipal.setToolTipText("Volta para a tela inicial");
      botaoIrParaTelaPrincipal.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            botaoIrParaTelaPrincipalActionPerformed(evt);
         }
      });
      panelButtons.add(botaoIrParaTelaPrincipal);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(panelTabela)
         .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
         .addGroup(layout.createSequentialGroup()
            .addComponent(jPanelFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
         .addComponent(panelButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(jPanelFilters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(panelTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(panelButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
      );

      setSize(new java.awt.Dimension(779, 522));
      setLocationRelativeTo(null);
   }// </editor-fold>//GEN-END:initComponents

    private void botaoIrParaTelaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIrParaTelaPrincipalActionPerformed
       setVisible(false);
       telaPrincipal.setLocationRelativeTo(this);
       telaPrincipal.setAutoRequestFocus(true);
       try {
          Thread.sleep(100L);
       } catch (InterruptedException ex) {
          if (TelaPrincipal.isDebugHabilitado()) {
             Logger.getLogger(AppropTimeBo.class.getName()).log(Level.SEVERE, null, ex);
          }
       }
       telaPrincipal.setVisible(true);
    }//GEN-LAST:event_botaoIrParaTelaPrincipalActionPerformed

    private void botaoFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoFiltrarActionPerformed
       filtrarAtividades();
    }//GEN-LAST:event_botaoFiltrarActionPerformed

    private void botaoLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparActionPerformed
       comboBoxTarefa.setSelectedItem("");
       fieldInicio.setText(null);
       fieldTermino.setText(null);
       populaComboBox(comboBoxTarefa, user.getId());
       comboBoxTarefa.setPopupVisible(false);
       botaoLimpar.requestFocus();

       try {
          filtroBotao = new AtividadeFilter();
          filtroBotao.setIdUsuarioIgualA(user.getId());
          filtroBotao.setNumeroBaseParaBuscarNoBanco(1L);
          atividadesMostradas = appropTimeBo.getAtividadesFiltradas(filtroBotao);
          qtdTodasAtividades = appropTimeBo.getCountAtividadesFiltradas(filtroBotao);

          totalTablePages = qtdTodasAtividades.intValue() / Constantes.MAXIMO_DE_ATIVIDADES_POR_PAGINA_TABELA;

          if ((qtdTodasAtividades % Constantes.MAXIMO_DE_ATIVIDADES_POR_PAGINA_TABELA) >= 0) {
             totalTablePages++;
          }

          paginaAtualAtividades = 1;
          populaPagina(paginaAtualAtividades);

          txtNumeroPaginaAtividades.setText(paginaAtualAtividades.toString());
          labelTotalPaginasAtividades.setText("de " + String.valueOf(totalTablePages) + " página(s)");
       } catch (Exception ex) {
          if (TelaPrincipal.isDebugHabilitado()) {
             Logger.getLogger(AppropTimeBo.class.getName()).log(Level.SEVERE, null, ex);
          }
       }
    }//GEN-LAST:event_botaoLimparActionPerformed

    private void fieldInicioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldInicioFocusLost
       DateValidator dv = new DateValidator();
       Date validate = dv.validate(fieldInicio.getText(), Constantes.PATTERN_DATA);
       if (!fieldInicio.isEditValid() || Objects.isNull(validate)) {
          fieldInicio.setText(null);
       }
    }//GEN-LAST:event_fieldInicioFocusLost

    private void fieldTerminoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldTerminoFocusLost
       DateValidator dv = new DateValidator();
       Date validate = dv.validate(fieldTermino.getText(), Constantes.PATTERN_DATA);
       if (!fieldTermino.isEditValid() || Objects.isNull(validate)) {
          fieldTermino.setText(null);
       }
    }//GEN-LAST:event_fieldTerminoFocusLost

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       if (isFiltroBotaoNuloOuVazio()) {
          AtividadeFilter filtro = new AtividadeFilter();
          filtro.setIdUsuarioIgualA(user.getId());
          filtro.setDataInicioMaiorQue(UtilMethods.formataStringParaDate(fieldInicio.getText(), Constantes.PATTERN_DATA));
          filtro.setDataTerminoMenorQue(UtilMethods.formataStringParaDate(fieldTermino.getText(), Constantes.PATTERN_DATA));
          filtro.setDescricaoTarefaContem(comboBoxTarefa.getSelectedItem().toString());
          qtdTodasAtividades = appropTimeBo.getCountAtividadesFiltradas(filtro);
          cleanTableTelaRelatorio(tabelaTarefas);

          if(paginaAtualAtividades <= 1){
            paginaAtualAtividades = 1;
            filtro.setNumeroBaseParaBuscarNoBanco(Long.valueOf(paginaAtualAtividades));
            atividadesMostradas = appropTimeBo.getAtividadesFiltradas(filtro);
          }
          populaPagina(paginaAtualAtividades);


          int totalDeAtividades = appropTimeBo.getTotalDeAtividades(user.getId());
          totalTablePages = verificaTotalPagina(totalDeAtividades);
          labelTotalPaginasAtividades.setText("de " + String.valueOf(totalTablePages) + " página(s)");

       }
       txtNumeroPaginaAtividades.setText(String.valueOf(paginaAtualAtividades));
       botaoContinuar.setEnabled(false);
       comboBoxTarefa.setPopupVisible(false);
    }//GEN-LAST:event_formWindowActivated

   private void txtNumeroPaginaAtividadesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroPaginaAtividadesKeyPressed
      if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
         Integer digitada = Integer.valueOf(UtilMethods.removeEspacosString(txtNumeroPaginaAtividades.getText()));
         if (UtilMethods.removeEspacosString(txtNumeroPaginaAtividades.getText()).isEmpty() == false
                 && Objects.equals(digitada, paginaAtualAtividades) == false) {
            //O numero digitado está entre a primeira página e a última página
            if (digitada > 0 && digitada <= totalTablePages && Objects.equals(digitada, paginaAtualAtividades) == false) {
               //Caso em que a lista foi filtrada
               txtNumeroPaginaAtividades.setText(String.valueOf(digitada));
               paginaAtualAtividades = digitada;
               //Caso em que a página digitada é maior que a última
            }
            else if (digitada > totalTablePages) {
               //Caso em que a página digitada é maior que a última e as atividades ESTÃO filtradas
               AtividadeFilter filtro;
               if (isFiltroBotaoNuloOuVazio() == false) {
                  filtro = filtroBotao.cloneData();
                  filtro.setNumeroBaseParaBuscarNoBanco(Long.valueOf(totalTablePages));
               }
               //Caso em que a página digitada é maior que a última e as atividades NÃO ESTÃO filtradas
               else {
                  filtro = new AtividadeFilter();
                  filtro.setIdUsuarioIgualA(user.getId());
                  qtdTodasAtividades = appropTimeBo.getCountAtividadesFiltradas(filtro);
               }
               filtro.setNumeroBaseParaBuscarNoBanco(Long.valueOf(totalTablePages));
               atividadesMostradas = appropTimeBo.getAtividadesFiltradas(filtro);
               paginaAtualAtividades = totalTablePages;
               populaPagina(paginaAtualAtividades);
               txtNumeroPaginaAtividades.setText(String.valueOf(paginaAtualAtividades));
               //Caso em que a página digitada é menor que a primeira
            }
            else {
               paginaAtualAtividades = 1;
               txtNumeroPaginaAtividades.setText(String.valueOf(paginaAtualAtividades));
            }
            populaPagina(paginaAtualAtividades);
         }
      }
   }//GEN-LAST:event_txtNumeroPaginaAtividadesKeyPressed

   private void botaoIrParaUltimaPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIrParaUltimaPaginaActionPerformed
      //Verifico se a pagina atual é a última página, se for, então não é necessário ir ao banco
      if (totalTablePages > paginaAtualAtividades) {
         txtNumeroPaginaAtividades.setText(String.valueOf(totalTablePages));
         paginaAtualAtividades = totalTablePages;
         populaPagina(paginaAtualAtividades);
      }
   }//GEN-LAST:event_botaoIrParaUltimaPaginaActionPerformed

   private void botaoIrParaPrimeiraPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIrParaPrimeiraPaginaActionPerformed
      //Verifico se a pagina atual é a primeira página, se for, então não é necessário ir ao banco
      if (paginaAtualAtividades > 1) {
         txtNumeroPaginaAtividades.setText(String.valueOf("1"));
         paginaAtualAtividades = 1;
         populaPagina(paginaAtualAtividades);
      }
   }//GEN-LAST:event_botaoIrParaPrimeiraPaginaActionPerformed

   private void populaPagina(Integer pagina) {
      AtividadeFilter filtro;
      if (isFiltroBotaoNuloOuVazio() == false) {
         filtro = filtroBotao.cloneData();
      } else {
         filtro = new AtividadeFilter();
         filtro.setIdUsuarioIgualA(user.getId());
      }
      filtro.setNumeroBaseParaBuscarNoBanco(Long.valueOf(pagina));
      atividadesMostradas = appropTimeBo.getAtividadesFiltradas(filtro);
      populateTableTelaRelatorio(atividadesMostradas, tabelaTarefas);
   }

   private void botaoIrParaProximaPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIrParaProximaPaginaActionPerformed
      //Verifico se a próxima pagina é a última página, se for, então não é necessário ir ao banco
      if (paginaAtualAtividades < totalTablePages) {
         paginaAtualAtividades = paginaAtualAtividades + 1;
         txtNumeroPaginaAtividades.setText(String.valueOf(paginaAtualAtividades));
         populaPagina(paginaAtualAtividades);
      }
   }//GEN-LAST:event_botaoIrParaProximaPaginaActionPerformed

   private void botaoIrParaPaginaAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIrParaPaginaAnteriorActionPerformed
      //Subtraio 2 pois quero a página anterior(-1) e para fazer corretamente a ida ao banco de dados(-1)
      Integer atual = paginaAtualAtividades - 2;
      //Verifico se a pagina anterior é a primeira página, se for, então não é necessário ir ao banco
      if (atual >= 0) {
         paginaAtualAtividades = paginaAtualAtividades - 1;
         txtNumeroPaginaAtividades.setText(String.valueOf(paginaAtualAtividades));
         populaPagina(paginaAtualAtividades);
      }
   }//GEN-LAST:event_botaoIrParaPaginaAnteriorActionPerformed

   private void botaoContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoContinuarActionPerformed
      int row = tabelaTarefas.convertRowIndexToModel(tabelaTarefas.getSelectedRow());
      if (row < 0) {
         return;
      }
      Object atividadeId = tabelaTarefas.getModel().getValueAt(row, 0);
      if (Objects.isNull(appropTimeBo.getAtividadeSemTermino(user.getId()))) {
         Atividade atividadeContinuar = appropTimeBo.getAtividadeById((Long) atividadeId);
         atividadeContinuar.setId(-1L);
         atividadeContinuar.setInicio(null);
         atividadeContinuar.setTermino(null);
         telaPrincipal.setContinuarTarefa(true);
         telaPrincipal.setAtividadeFromTelaRelatorio(atividadeContinuar);
         paginaAtualAtividades = 1;
         this.setVisible(false);
         telaPrincipal.setAutoRequestFocus(true);
         telaPrincipal.setVisible(true);
      } else {
         JOptionPane.showMessageDialog(this, "Existe uma tarefa em andamento. Você precisa finalizá-la antes de criar uma nova!", "Aviso", JOptionPane.WARNING_MESSAGE);
      }

   }//GEN-LAST:event_botaoContinuarActionPerformed

   private void tabelaTarefasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabelaTarefasFocusLost
      if (tabelaTarefas.getSelectedRow() < 0) {
         botaoContinuar.setEnabled(false);
      } else {
         botaoContinuar.setEnabled(true);
      }
   }//GEN-LAST:event_tabelaTarefasFocusLost

   private void tabelaTarefasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabelaTarefasFocusGained
      if (tabelaTarefas.getSelectedRow() < 0) {
         botaoContinuar.setEnabled(false);
      } else {
         botaoContinuar.setEnabled(true);
      }
   }//GEN-LAST:event_tabelaTarefasFocusGained

   private void botaoAgregadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAgregadorActionPerformed
      filtroBotao.setIdUsuarioIgualA(user.getId());

      if (fieldInicio.getText().equals(Constantes.MASK_DATA) == false) {
         Date inicio = UtilMethods.formataStringParaDate(fieldInicio.getText(), Constantes.PATTERN_DATA);
         filtroBotao.setDataInicioMaiorQue(inicio);
      }

      if (fieldTermino.getText().equals(Constantes.MASK_DATA) == false) {
         Date termino = UtilMethods.formataStringParaDate(fieldTermino.getText(), Constantes.PATTERN_DATA);
         filtroBotao.setDataTerminoMenorQue(termino);
      }

      if (comboBoxTarefa.getSelectedItem().equals("") == false) {
         String descricaoTarefa = comboBoxTarefa.getSelectedItem().toString();
         filtroBotao.setDescricaoTarefaContem(descricaoTarefa);
      }

      txtNumeroPaginaAgregados.setText("1");

      opcaoDiarioActionPerformed(evt);
      opcoesAgregadoras.setSelected(opcaoDiario.getModel(), true);
      opcaoDiario.requestFocus();

      dialogAgregados.setLocationRelativeTo(this);
      dialogAgregados.setVisible(true);
   }//GEN-LAST:event_botaoAgregadorActionPerformed

   private void opcaoDiarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcaoDiarioActionPerformed
      conteudoTabelaAgregador(Constantes.AGREGADOR_DIARIO);
   }//GEN-LAST:event_opcaoDiarioActionPerformed

   private void opcaoSemanalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcaoSemanalActionPerformed
      conteudoTabelaAgregador(Constantes.AGREGADOR_SEMANAL);
   }//GEN-LAST:event_opcaoSemanalActionPerformed

   private void opcaoAnualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcaoAnualActionPerformed
      conteudoTabelaAgregador(Constantes.AGREGADOR_ANUAL);
   }//GEN-LAST:event_opcaoAnualActionPerformed

   private void opcaoGlobalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcaoGlobalActionPerformed
      conteudoTabelaAgregador(Constantes.AGREGADOR_GLOBAL);
   }//GEN-LAST:event_opcaoGlobalActionPerformed

   private void opcaoMensalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcaoMensalActionPerformed
      conteudoTabelaAgregador(Constantes.AGREGADOR_MENSAL);
   }//GEN-LAST:event_opcaoMensalActionPerformed

   private void dialogAgregadosWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_dialogAgregadosWindowActivated
      if (Objects.nonNull(filtroBotao.getDataInicioMaiorIgualA())) {
         labelFiltroInicio.setText(UtilMethods.formataDateParaString(filtroBotao.getDataInicioMaiorIgualA(), Constantes.PATTERN_DATA));
      } else {
         labelFiltroInicio.setText("Indefinida");
      }

      if (Objects.nonNull(filtroBotao.getDataTerminoMenorIgualA())) {
         labelFiltroTermino.setText(UtilMethods.formataDateParaString(filtroBotao.getDataTerminoMenorIgualA(), Constantes.PATTERN_DATA));
      } else {
         labelFiltroTermino.setText("Indefinida");
      }
      if (Objects.nonNull(filtroBotao.getDescricaoTarefaContem())) {
         labelFiltroTarefa.setText(filtroBotao.getDescricaoTarefaContem());
      } else {
         labelFiltroTarefa.setText("Todas");
      }
   }//GEN-LAST:event_dialogAgregadosWindowActivated

   private void botaoExportarRelatorioCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExportarRelatorioCsvActionPerformed
      AtividadeFilter filtro = filtroBotao.cloneData();
      filtro.setNumeroBaseParaBuscarNoBanco(null);

      if (opcaoGlobal.isSelected()) {
         StatusAppropTime status = appropTimeBo.exportRelatorioToCSV(appropTimeBo.getAgregadoGlobal(filtro), Constantes.AGREGADOR_GLOBAL);
         JOptionPane.showMessageDialog(this, status.getMensagem(), "Export relatório", JOptionPane.INFORMATION_MESSAGE);
      }
      if (opcaoAnual.isSelected()) {
         StatusAppropTime status = appropTimeBo.exportRelatorioToCSV(appropTimeBo.getAgregadoAnual(filtro), Constantes.AGREGADOR_ANUAL);
         JOptionPane.showMessageDialog(this, status.getMensagem(), "Export relatório", JOptionPane.INFORMATION_MESSAGE);
      }
      if (opcaoMensal.isSelected()) {
         StatusAppropTime status = appropTimeBo.exportRelatorioToCSV(appropTimeBo.getAgregadoMensal(filtro), Constantes.AGREGADOR_MENSAL);
         JOptionPane.showMessageDialog(this, status.getMensagem(), "Export relatório", JOptionPane.INFORMATION_MESSAGE);
      }
      if (opcaoSemanal.isSelected()) {
         StatusAppropTime status = appropTimeBo.exportRelatorioToCSV(appropTimeBo.getAgregadoSemanal(filtro), Constantes.AGREGADOR_SEMANAL);
         JOptionPane.showMessageDialog(this, status.getMensagem(), "Export relatório", JOptionPane.INFORMATION_MESSAGE);
      }
      if (opcaoDiario.isSelected()) {
         StatusAppropTime status = appropTimeBo.exportRelatorioToCSV(appropTimeBo.getAgregadoDiario(filtro), Constantes.AGREGADOR_DIARIO);
         JOptionPane.showMessageDialog(this, status.getMensagem(), "Export relatório", JOptionPane.INFORMATION_MESSAGE);
      }
   }//GEN-LAST:event_botaoExportarRelatorioCsvActionPerformed

   private void fieldInicioMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fieldInicioMousePressed
      if (fieldInicio.getText().equals(Constantes.MASK_DATA)) {
         fieldInicio.setCaretPosition(0);
      }
   }//GEN-LAST:event_fieldInicioMousePressed

   private void fieldTerminoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fieldTerminoMousePressed
      if (fieldTermino.getText().equals(Constantes.MASK_DATA)) {
         fieldTermino.setCaretPosition(0);
      }
   }//GEN-LAST:event_fieldTerminoMousePressed

   private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
      this.requestFocus();
   }//GEN-LAST:event_formMouseClicked

   private void fieldInicioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldInicioKeyReleased
      if(evt.getKeyCode() == KeyEvent.VK_ENTER){
         botaoFiltrarActionPerformed(null);
      }
   }//GEN-LAST:event_fieldInicioKeyReleased

   private void fieldTerminoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldTerminoKeyReleased
      if(evt.getKeyCode() == KeyEvent.VK_ENTER){
         botaoFiltrarActionPerformed(null);
      }
   }//GEN-LAST:event_fieldTerminoKeyReleased

   private void botaoRelatorioProximaPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRelatorioProximaPaginaActionPerformed
      //Verifico se a próxima pagina é a última página, se for, então não é necessário ir ao banco
      if (paginaAtualAgregados < totalPaginasAgregados) {
         paginaAtualAgregados = paginaAtualAgregados + 1;
         txtNumeroPaginaAgregados.setText(String.valueOf(paginaAtualAgregados));
         verificaOpcaoSelecionada(evt);
      }
   }//GEN-LAST:event_botaoRelatorioProximaPaginaActionPerformed

   private void botaoRelatorioPaginaAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRelatorioPaginaAnteriorActionPerformed
      //Subtraio 2 pois quero a página anterior(-1) e para fazer corretamente a ida ao banco de dados(-1)
      Integer atual = paginaAtualAgregados - 2;
      //Verifico se a pagina anterior é a primeira página, se for, então não é necessário ir ao banco
      if (atual >= 0) {
         paginaAtualAgregados = paginaAtualAgregados - 1;
         txtNumeroPaginaAgregados.setText(String.valueOf(paginaAtualAgregados));
         verificaOpcaoSelecionada(evt);
      }
   }//GEN-LAST:event_botaoRelatorioPaginaAnteriorActionPerformed

   private void botaoRelatorioPrimeiraPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRelatorioPrimeiraPaginaActionPerformed
      //Verifico se a pagina atual é a primeira página, se for, então não é necessário ir ao banco
      if (paginaAtualAgregados > 1) {
         paginaAtualAgregados = 1;
         txtNumeroPaginaAgregados.setText(String.valueOf(paginaAtualAgregados));
         verificaOpcaoSelecionada(evt);
      }
   }//GEN-LAST:event_botaoRelatorioPrimeiraPaginaActionPerformed

   private void botaoRelatorioUltimaPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRelatorioUltimaPaginaActionPerformed
      //Verifico se a pagina atual é a última página, se for, então não é necessário ir ao banco
      if (totalPaginasAgregados > paginaAtualAgregados) {
         txtNumeroPaginaAgregados.setText(String.valueOf(totalPaginasAgregados));
         paginaAtualAgregados = totalPaginasAgregados.intValue();
         verificaOpcaoSelecionada(evt);
      }
   }//GEN-LAST:event_botaoRelatorioUltimaPaginaActionPerformed

   private void opcaoDiarioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_opcaoDiarioItemStateChanged
      if(evt.getStateChange() == ItemEvent.DESELECTED){
         paginaAtualAgregados = 1;
         txtNumeroPaginaAgregados.setText(String.valueOf(paginaAtualAgregados));
      }
   }//GEN-LAST:event_opcaoDiarioItemStateChanged

   private void opcaoSemanalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_opcaoSemanalItemStateChanged
      if(evt.getStateChange() == ItemEvent.DESELECTED){
         paginaAtualAgregados = 1;
         txtNumeroPaginaAgregados.setText(String.valueOf(paginaAtualAgregados));
      }
   }//GEN-LAST:event_opcaoSemanalItemStateChanged

   private void opcaoMensalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_opcaoMensalItemStateChanged
      if(evt.getStateChange() == ItemEvent.DESELECTED){
         paginaAtualAgregados = 1;
         txtNumeroPaginaAgregados.setText(String.valueOf(paginaAtualAgregados));
      }
   }//GEN-LAST:event_opcaoMensalItemStateChanged

   private void opcaoAnualItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_opcaoAnualItemStateChanged
      if(evt.getStateChange() == ItemEvent.DESELECTED){
         paginaAtualAgregados = 1;
         txtNumeroPaginaAgregados.setText(String.valueOf(paginaAtualAgregados));
      }
   }//GEN-LAST:event_opcaoAnualItemStateChanged

   private void opcaoGlobalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_opcaoGlobalItemStateChanged
      if(evt.getStateChange() == ItemEvent.DESELECTED){
         paginaAtualAgregados = 1;
         txtNumeroPaginaAgregados.setText(String.valueOf(paginaAtualAgregados));
      }
   }//GEN-LAST:event_opcaoGlobalItemStateChanged

   private void txtNumeroPaginaAgregadosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroPaginaAgregadosKeyPressed
      if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
         Integer digitada = Integer.valueOf(UtilMethods.removeEspacosString(txtNumeroPaginaAgregados.getText()));
         if (UtilMethods.removeEspacosString(txtNumeroPaginaAgregados.getText()).isEmpty() == false
                 && Objects.equals(digitada, paginaAtualAgregados) == false) {
            //O numero digitado está entre a primeira página e a última página
            if (digitada > 0 && digitada <= totalPaginasAgregados && Objects.equals(digitada, paginaAtualAgregados) == false) {
               //Caso em que a lista foi filtrada
               paginaAtualAgregados = digitada;
               //Caso em que a página digitada é maior que a última
            }
            //Caso em que a página digitada é maior que a última e as atividades ESTÃO filtradas
            else if (digitada > totalPaginasAgregados) {

               paginaAtualAgregados = totalPaginasAgregados.intValue();
            }
            //Caso em que a página digitada é menor que a primeira
            else {
               paginaAtualAgregados = 1;
            }
            txtNumeroPaginaAgregados.setText(String.valueOf(paginaAtualAgregados));
            verificaOpcaoSelecionada(null);
         }
      }
   }//GEN-LAST:event_txtNumeroPaginaAgregadosKeyPressed

   /**
    * @param args the command line arguments
    */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TelaRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TelaRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TelaRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TelaRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TelaRelatorio().setVisible(true);
//            }
//        });
//    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton botaoAgregador;
   private javax.swing.JButton botaoContinuar;
   private javax.swing.JButton botaoExportarRelatorioCsv;
   private javax.swing.JButton botaoFiltrar;
   private javax.swing.JButton botaoIrParaPaginaAnterior;
   private javax.swing.JButton botaoIrParaPrimeiraPagina;
   private javax.swing.JButton botaoIrParaProximaPagina;
   private javax.swing.JButton botaoIrParaTelaPrincipal;
   private javax.swing.JButton botaoIrParaUltimaPagina;
   private javax.swing.JButton botaoLimpar;
   private javax.swing.JButton botaoRelatorioPaginaAnterior;
   private javax.swing.JButton botaoRelatorioPrimeiraPagina;
   private javax.swing.JButton botaoRelatorioProximaPagina;
   private javax.swing.JButton botaoRelatorioUltimaPagina;
   private javax.swing.JComboBox<String> comboBoxTarefa;
   private javax.swing.JDialog dialogAgregados;
   private javax.swing.JFormattedTextField fieldInicio;
   private javax.swing.JFormattedTextField fieldTermino;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanelFilters;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JLabel labelDialogAgregador;
   private javax.swing.JLabel labelDsTarefa;
   private javax.swing.JLabel labelDtInicio;
   private javax.swing.JLabel labelDtTermino;
   private javax.swing.JLabel labelFiltroEmUso;
   private javax.swing.JLabel labelFiltroInicio;
   private javax.swing.JLabel labelFiltroTarefa;
   private javax.swing.JLabel labelFiltroTermino;
   private javax.swing.JLabel labelInicio;
   private javax.swing.JLabel labelTarefa;
   private javax.swing.JLabel labelTempoTotal;
   private javax.swing.JLabel labelTermino;
   private javax.swing.JLabel labelTotalGasto;
   private javax.swing.JLabel labelTotalPaginasAgregados;
   private javax.swing.JLabel labelTotalPaginasAtividades;
   private javax.swing.JRadioButton opcaoAnual;
   private javax.swing.JRadioButton opcaoDiario;
   private javax.swing.JRadioButton opcaoGlobal;
   private javax.swing.JRadioButton opcaoMensal;
   private javax.swing.JRadioButton opcaoSemanal;
   private javax.swing.ButtonGroup opcoesAgregadoras;
   private javax.swing.JPanel panelButtons;
   private javax.swing.JScrollPane panelTabela;
   private javax.swing.JTable tabelaAgregados;
   private javax.swing.JTable tabelaTarefas;
   private javax.swing.JFormattedTextField txtNumeroPaginaAgregados;
   private javax.swing.JFormattedTextField txtNumeroPaginaAtividades;
   // End of variables declaration//GEN-END:variables

   private void loadInitialData() {
      cleanTableTelaRelatorio(tabelaTarefas);
      populaComboBox(comboBoxTarefa, user.getId());
      AtividadeFilter filtro = new AtividadeFilter();
      filtro.setIdUsuarioIgualA(user.getId());
      filtro.setNumeroBaseParaBuscarNoBanco(1L);
      atividadesMostradas = appropTimeBo.getAtividadesFiltradas(filtro);
      paginaAtualAtividades = 1;
      populaPagina(paginaAtualAtividades);

      comboBoxTarefa.setPopupVisible(false);

      int totalDeAtividades = appropTimeBo.getTotalDeAtividades(user.getId());
      totalTablePages = verificaTotalPagina(totalDeAtividades);
      labelTotalPaginasAtividades.setText("de " + String.valueOf(totalTablePages) + " página(s)");

      botaoContinuar.setEnabled(false);
   }

   private void cleanTableTelaRelatorio(JTable tabela) {
      DefaultTableModel tbl = (DefaultTableModel) tabela.getModel();

      while (tbl.getRowCount() > 0) {
         tbl.removeRow(0);
      }
   }

   private void populateTableAgregador(JTable tabela) {
      if (Objects.nonNull(tabela)) {
         cleanTableTelaRelatorio(tabela);

         DefaultTableModel tbl = (DefaultTableModel) tabela.getModel();
         totalMinutos = 0L;
         for (AgregadoDto agregado : agregados) {
            String duracao = UtilMethods.calculaTempoEmMinutos(agregado.getTotalMinutos());
            totalMinutos += agregado.getTotalMinutos();
            if (agregado.getTipo().equals(Constantes.AGREGADOR_DIARIO)) {
               tbl.addRow(new Object[]{agregado.getDsTarefa(), UtilMethods.formatoDataStringBrasil(agregado.getAgregador(), "yyyy-MM-dd"), duracao});
            } else if (agregado.getTipo().equals(Constantes.AGREGADOR_SEMANAL)) {
               tbl.addRow(new Object[]{agregado.getDsTarefa(), agregado.getAgregador(), calculaSemanaDoAno(agregado), duracao});
               calculaSemanaDoAno(agregado);
            } else if (agregado.getTipo().equals(Constantes.AGREGADOR_GLOBAL) == false) {
               tbl.addRow(new Object[]{agregado.getDsTarefa(), agregado.getAgregador(), duracao});
            } else {
               tbl.addRow(new Object[]{agregado.getDsTarefa(), duracao});
            }
         }
         labelTotalGasto.setText(UtilMethods.calculaTempoEmMinutos(totalMinutos));
      }
   }

   private void populateTableTelaRelatorio(List<Atividade> atvds, JTable tabela) {
      if (Objects.nonNull(tabela)) {
         cleanTableTelaRelatorio(tabela);

         DefaultTableModel tbl = (DefaultTableModel) tabela.getModel();

         for (Atividade atvd : atvds) {
            if (!Objects.isNull(atvd.getTermino())) {
               SimpleDateFormat dataHoraFormat = new SimpleDateFormat("dd/MM/yyyy - HH:mm:ss");
               SimpleDateFormat horaFormat = new SimpleDateFormat(Constantes.PATTERN_HORA);
               String periodo = dataHoraFormat.format(atvd.getInicio()) + " a " + horaFormat.format(atvd.getTermino());
               String duracao = UtilMethods.duracaoDatas(atvd.getInicio(), atvd.getTermino());
               tbl.addRow(new Object[]{atvd.getId(), atvd.getTarefa().getDescricao(), periodo, duracao});
            }
         }
      }
   }

   private void populaComboBox(JComboBox comboBox, long idUsuario) {
      if (Objects.nonNull(comboBox)) {
         DefaultComboBoxModel model = (DefaultComboBoxModel) comboBox.getModel();
         comboBox.removeAllItems();
         comboBox.addItem("");

         List<Tarefa> tarefasByRelevancia = appropTimeBo.getTarefaByRelevancia(idUsuario);

         if (Objects.nonNull(tarefasByRelevancia)) {
            for (Tarefa tarefa : tarefasByRelevancia) {
               model.addElement(tarefa.getDescricao());
            }
         }
      }
   }

   private void adicionaColunaTabelaAgregados(String nomeNovaColuna) {
      DefaultTableModel model = (DefaultTableModel) tabelaAgregados.getModel();

      int numeroColuna = 0;

      TableColumn columnTarefa = new TableColumn(numeroColuna);
      columnTarefa.setIdentifier("Tarefa");
      columnTarefa.setHeaderValue("Tarefa");
      columnTarefa.setMinWidth(100);
      model.addColumn(columnTarefa);

      numeroColuna++;

      TableColumn columnAgregador = new TableColumn(numeroColuna);
      columnAgregador.setIdentifier("Agregador");
      columnAgregador.setHeaderValue(nomeNovaColuna);
      tabelaAgregados.addColumn(columnAgregador);

      numeroColuna++;

      if (nomeNovaColuna.equals(Constantes.AGREGADOR_SEMANAL)) {
         TableColumn columnPeriodo = new TableColumn(numeroColuna);
         columnPeriodo.setIdentifier("Período");
         columnPeriodo.setHeaderValue("Período");
         model.addColumn(columnPeriodo);

         numeroColuna++;
         model.setColumnIdentifiers(new Object[]{columnTarefa.getHeaderValue(), columnAgregador.getHeaderValue(),
            columnPeriodo.getHeaderValue(), "Tempo gasto"});

         tabelaAgregados.getColumnModel().getColumn(0).setMinWidth(200);
         tabelaAgregados.getColumnModel().getColumn(1).setMinWidth(85);
         tabelaAgregados.getColumnModel().getColumn(1).setMaxWidth(100);
         tabelaAgregados.getColumnModel().getColumn(2).setMinWidth(170);
         tabelaAgregados.getColumnModel().getColumn(2).setMaxWidth(220);
         tabelaAgregados.getColumnModel().getColumn(3).setMinWidth(100);
         tabelaAgregados.getColumnModel().getColumn(3).setMaxWidth(110);
      } else if (nomeNovaColuna.equals(Constantes.AGREGADOR_GLOBAL) == false) {
         TableColumn columnTempo = new TableColumn(numeroColuna);
         columnTempo.setIdentifier("Tempo gasto");
         columnTempo.setHeaderValue("Tempo gasto");
         model.addColumn("Tempo gasto");
         model.setColumnIdentifiers(new Object[]{columnTarefa.getHeaderValue(), columnAgregador.getHeaderValue(), columnTempo.getHeaderValue()});

         tabelaAgregados.getColumnModel().getColumn(0).setMinWidth(200);

         if (nomeNovaColuna.equals(Constantes.AGREGADOR_DIARIO)) {
            tabelaAgregados.getColumnModel().getColumn(1).setMinWidth(90);
            tabelaAgregados.getColumnModel().getColumn(1).setMaxWidth(110);
         } else {
            tabelaAgregados.getColumnModel().getColumn(1).setMinWidth(45);
            tabelaAgregados.getColumnModel().getColumn(1).setMaxWidth(65);
         }

         tabelaAgregados.getColumnModel().getColumn(2).setMinWidth(98);
         tabelaAgregados.getColumnModel().getColumn(2).setMaxWidth(110);
      } else {
         model.setColumnIdentifiers(new Object[]{columnTarefa.getHeaderValue(), "Tempo gasto"});

         tabelaAgregados.getColumnModel().getColumn(0).setMinWidth(230);
         tabelaAgregados.getColumnModel().getColumn(1).setMinWidth(98);
         tabelaAgregados.getColumnModel().getColumn(1).setMaxWidth(100);
      }

   }

   private Integer verificaTotalPagina(int tamanhoLista) {
      Integer toReturn = tamanhoLista / Constantes.MAXIMO_DE_ATIVIDADES_POR_PAGINA_TABELA;

      if ((tamanhoLista % Constantes.MAXIMO_DE_ATIVIDADES_POR_PAGINA_TABELA) > 1 || tamanhoLista == 0) {
         toReturn++;
      }
      return toReturn;
   }

   private void conteudoTabelaAgregador(String agregador) {
      AtividadeFilter filtro = filtroBotao.cloneData();

      paginaAtualAgregados = Integer.valueOf(UtilMethods.removeEspacosString(txtNumeroPaginaAgregados.getText()));
      filtro.setNumeroBaseParaBuscarNoBanco(Long.valueOf(paginaAtualAgregados));

      Long totalAgregados;

      switch (agregador) {
         case Constantes.AGREGADOR_DIARIO:
            montaTabelaAgregador(agregador);
            totalAgregados = appropTimeBo.getCountAgregadoDiario(filtro);
            agregados = appropTimeBo.getAgregadoDiario(filtro);
            break;
         case Constantes.AGREGADOR_SEMANAL:
            montaTabelaAgregador(agregador);
            totalAgregados = appropTimeBo.getCountAgregadoSemanal(filtro);
            agregados = appropTimeBo.getAgregadoSemanal(filtro);
            break;
         case Constantes.AGREGADOR_MENSAL:
            montaTabelaAgregador(agregador);
            totalAgregados = appropTimeBo.getCountAgregadoMensal(filtro);
            agregados = appropTimeBo.getAgregadoMensal(filtro);
            break;
         case Constantes.AGREGADOR_ANUAL:
            montaTabelaAgregador(agregador);
            totalAgregados = appropTimeBo.getCountAgregadoAnual(filtro);
            agregados = appropTimeBo.getAgregadoAnual(filtro);
            break;
         case Constantes.AGREGADOR_GLOBAL:
            montaTabelaAgregador(agregador);
            totalAgregados = appropTimeBo.getCountAgregadoGlobal(filtro);
            agregados = appropTimeBo.getAgregadoGlobal(filtro);
            break;
         default:
            return;
      }
      totalPaginasAgregados = Long.valueOf(verificaTotalPagina(totalAgregados.intValue()));
      labelTotalPaginasAgregados.setText("de " + String.valueOf(totalPaginasAgregados) + " página(s)");
      populateTableAgregador(tabelaAgregados);
   }

   private void montaTabelaAgregador(String agregador) {
      cleanTableTelaRelatorio(tabelaAgregados);

      tabelaAgregados.removeColumnSelectionInterval(0, tabelaAgregados.getColumnCount() - 1);

      adicionaColunaTabelaAgregados(agregador);
   }

   public void filtrarAtividades() {
      atualizaFiltro();
      if (comboBoxTarefa.getSelectedItem().equals("") && fieldInicio.getText().equals(Constantes.MASK_DATA)
              && fieldTermino.getText().equals(Constantes.MASK_DATA)) {
         botaoLimparActionPerformed(null);
         return;
      }
      try {
         filtroBotao.setNumeroBaseParaBuscarNoBanco(1L);
         atividadesMostradas = appropTimeBo.getAtividadesFiltradas(filtroBotao);

         qtdTodasAtividades = appropTimeBo.getCountAtividadesFiltradas(filtroBotao);
         totalTablePages = qtdTodasAtividades.intValue() / Constantes.MAXIMO_DE_ATIVIDADES_POR_PAGINA_TABELA;

         if ((qtdTodasAtividades % Constantes.MAXIMO_DE_ATIVIDADES_POR_PAGINA_TABELA) > 0 || qtdTodasAtividades == 0) {
            totalTablePages++;
         }
         labelTotalPaginasAtividades.setText("de " + String.valueOf(totalTablePages) + " página(s)");

         paginaAtualAtividades = 1;
         txtNumeroPaginaAtividades.setText(paginaAtualAtividades.toString());
         populaPagina(paginaAtualAtividades);
      } catch (Exception ex) {
         if (TelaPrincipal.isDebugHabilitado()) {
            Logger.getLogger(AppropTimeBo.class.getName()).log(Level.SEVERE, null, ex);
         }
      }
   }

   private String calculaSemanaDoAno(AgregadoDto agregado) {
      if (Objects.isNull(agregado)) {
         return "";
      }
      String[] split = agregado.getAgregador().split("/");
      String semana = split[0];
      String ano = split[1];

      Long weekOfYear = Long.valueOf(semana);

      //O numero 51 representa um valor que pode ser aleatorio, mas que nao pode ser muito perto do numero
      //  do primeiro dia DayOfWeek.SUNDAY neste ano
      LocalDate dataInicioSemana = LocalDate.ofYearDay(Integer.valueOf(ano), 51)
              .with(IsoFields.WEEK_OF_WEEK_BASED_YEAR, weekOfYear)
              .with(TemporalAdjusters.previousOrSame(DayOfWeek.SUNDAY));

      String inicioSemanaFormatado = UtilMethods.formatoDataStringBrasil(dataInicioSemana.toString(), "yyyy-MM-dd");

      LocalDate dataFimSemana = dataInicioSemana.plusDays(6L);

      String fimSemanaFormatado = UtilMethods.formatoDataStringBrasil(dataFimSemana.toString(), "yyyy-MM-dd");

      return inicioSemanaFormatado + " a " + fimSemanaFormatado;
   }

   private void setupShortCutTextArea() {

      List<JTextComponent> listaDeComponentes = new ArrayList<>();

      listaDeComponentes.add(txtNumeroPaginaAtividades);
      listaDeComponentes.add(fieldInicio);
      listaDeComponentes.add(fieldTermino);

      adicionaShortCut(listaDeComponentes);
   }

   private void adicionaShortCut(List<JTextComponent> components) {
      String irParaTelaPrincipal = "Ir para Tela Principal";
      String relatorio = "Relatório";

      Action shortCutIrParaTelaPrincipal = new AbstractAction(irParaTelaPrincipal) {

         @Override
         public void actionPerformed(ActionEvent evt) {
            botaoIrParaTelaPrincipalActionPerformed(evt);
         }
      };

      Action shortCutRelatorio =  new AbstractAction(relatorio) {

         @Override
         public void actionPerformed(ActionEvent evt) {
            botaoAgregadorActionPerformed(evt);
         }
      };


      for (JTextComponent component : components) {
         component.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_H, KeyEvent.CTRL_DOWN_MASK), irParaTelaPrincipal);
         component.getActionMap().put(irParaTelaPrincipal, shortCutIrParaTelaPrincipal);

         component.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_H, KeyEvent.CTRL_DOWN_MASK), irParaTelaPrincipal);
         component.getActionMap().put(irParaTelaPrincipal, shortCutIrParaTelaPrincipal);

         component.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK), relatorio);
         component.getActionMap().put(relatorio, shortCutRelatorio);

         component.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK), relatorio);
         component.getActionMap().put(relatorio, shortCutRelatorio);
      }
   }

   private void atualizaFiltro() {
      if(Objects.isNull(filtroBotao)){
         filtroBotao = new AtividadeFilter();
      }
      filtroBotao.setIdUsuarioIgualA(user.getId());
      Date inicio = UtilMethods.formataStringParaDate(fieldInicio.getText(), Constantes.PATTERN_DATA);
      filtroBotao.setDataInicioMaiorQue(inicio);
      Date termino = UtilMethods.formataStringParaDate(fieldTermino.getText(), Constantes.PATTERN_DATA);
      filtroBotao.setDataTerminoMenorQue(termino);
      String descricaoTarefa = comboBoxTarefa.getSelectedItem().toString();
      filtroBotao.setDescricaoTarefaContem(descricaoTarefa);
   }

   private boolean isFiltroBotaoNuloOuVazio(){
      if(Objects.isNull(filtroBotao)){
         return true;
      }
      if(Objects.isNull(filtroBotao.getDataInicioMaiorIgualA())
              && Objects.isNull(filtroBotao.getDataTerminoMenorIgualA())
              && StringUtils.isEmpty(filtroBotao.getDescricaoTarefaContem())){
         return true;
      }
      return false;
   }

   private void verificaOpcaoSelecionada(ActionEvent evt) {
      if(opcaoDiario.isSelected()){
         opcaoDiarioActionPerformed(evt);
         return;
      }
      if(opcaoSemanal.isSelected()){
         opcaoSemanalActionPerformed(evt);
         return;
      }
      if(opcaoMensal.isSelected()){
         opcaoMensalActionPerformed(evt);
         return;
      }
      if(opcaoAnual.isSelected()){
         opcaoAnualActionPerformed(evt);
         return;
      }
      if(opcaoGlobal.isSelected()){
         opcaoGlobalActionPerformed(evt);
      }
   }
}
